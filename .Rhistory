library(ggplot2)
library(RColorBrewer)
ggplot(pt, aes(x = Var2, y = Freq, fill = Var1)) +
theme_bw(base_size = 15) +
geom_col(position = "fill", width = 0.5) +
xlab("Sample") +
ylab("Proportion") +
scale_fill_manual(values = brewer.pal(12, "Paired")) +
theme(legend.title = element_blank())
ggplot(pt, aes(x = Var2, y = Freq, fill = Var1)) +
theme_bw(base_size = 15) +
geom_col(position = "fill", width = 0.5) +
xlab("Sample") +
ylab("Proportion") +
scale_fill_manual(values = brewer.pal(24, "Paired")) +
theme(legend.title = element_blank())
ggplot(pt, aes(x = Var2, y = Freq, fill = Var1)) +
theme_bw(base_size = 15) +
geom_col(position = "fill", width = 0.5) +
xlab("Sample") +
ylab("Proportion") +
theme(legend.title = element_blank())
View(tumorsub)
tumorsub$Grade
tumorsub$Tumor.Grade
tumorsub[tumorsub$Tumor.Grade]
tumorsub[tumorsub$Tumor.Grade=='IV']
tumorsub[tumorsub$Tumor.Grade='IV']
grade_iv_subset <- subset(tumorsub@meta.data$Tumor.Grade, subset='IV')
grade_iv_subset <- subset(x=tumorsub, subset=Tumor.Grade='IV')
grade_iv_subset <- subset(x=tumorsub, subset=Tumor.Grade=='IV')
table(tumorsub@active.ident)['FB1']
table(tumorsub@active.ident)['FB1'][0]
table(tumorsub@active.ident)['FB1'][
table(tumorsub@active.ident)['FB1']
table(tumorsub@active.ident)
table(grade_iv_subset@active.ident)
table(paste0(tumorsub@meta.data$Tumor.Grade, tumorsub@meta.data$seurat_clusters))
prop.table(table(Idents(tumorsub), tumorsub$Tumor.Grade), margin = 2)
Indents(tumorsub)
Idents(tumorsub)
table(Idents(tumorsub))
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
library(viridis)
tumorsub <- readRDS(file = '/Users/brandonbergs/Documents/Research/Glioma scRNA-Seq Project/Data/tumorsub.RDS')
png(filename="1.1_images/tumorsub_UMAP.png")
DimPlot(object=tumorsub, reduction = 'umap', label=TRUE)
dev.off()
DimPlot(object=tumorsub, reduction = 'umap', label=TRUE)
# Find differentially expressed features in the Endothelial Cell cluster compared to all other cells
EC.markers <- FindMarkers(tumorsub, ident.1 = 'EC', only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(EC.markers)
View(lymph_data)
View(lymph_data)
library(usethis)
usethis::edit_r_environ()
library(Seurat)
library(infercnv)
library(Matrix)
t_subser <- readRDS(file = '/Users/brandonbergs/Documents/Research/Glioma scRNA-Seq Project/Data/tumorsub.RDS')
t_subser_raw_counts_rna <- GetAssayData(t_subser, slot="data", assay="RNA")
t_subser_raw_counts_rna_df <- as.data.frame(t_subser_raw_counts_rna)
View(t_subser_raw_counts_rna)
t_subser_raw_counts_rna_matrix <- as.matrix(t_subser_raw_counts_rna)
t_subser_raw_counts_rna[1:5,1:5]
write.table(t_subser_raw_counts_rna[1:5,1:5], file="1.2_results/t_counts.mtx", quote=FALSE, sep = " ")
write.table(t_subser_raw_counts_rna[1:5,1:5], file="1.2_results/t_counts.txt", quote=FALSE, sep = " ")
write.table(t_subser_raw_counts_rna, file="1.2_results/t_counts.txt", quote=FALSE, sep = " ")
library(usethis)
usethis::edit_r_environ()
library(Seurat)
library(infercnv)
library(Matrix)
infercnv_obj <- CreateInfercnvObject(raw_counts_matrix = '1.2_results/t_counts.txt',
annotations_file = '1.2_results/t_cell_annotations.txt',
delim = '\t',
gene_order_file = '1.2_results/hg38_gencode_v27.txt',
ref_group_names = c("Normal"))
infercnv_obj <- infercnv::run(infercnv_obj,
cutoff = 0.1,
out_dir = '1.2_results/infercnv_outputs',
cluster_by_groups=T,
denoise=T,
HMM=T)
options(scipen = 100)
library(usethis)
usethis::edit_r_environ()
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(stats)
tumorsub <- readRDS(file = '/Users/brandonbergs/Documents/Research/Glioma scRNA-Seq Project/Data/tumorsub.RDS')
View(tumorsub)
DimPlot(object=tumorsub, reduction = 'umap', label=TRUE)
# Get seurat object for only fibroblast cells
nontumorsub <- subset(x = tumorsub, idents = 'FB1')
View(nontumorsub)
# Get seurat object for only fibroblast cells
fibroblast_sub <- subset(x = tumorsub, idents = 'FB1')
View(fibroblast_sub)
View(fibroblast_sub)
fibroblast_sub$Tumor.Grade
fibroblast_sub$Tumor.Grade
fibroblast_sub$Pathology
fibroblast_gbm <- subset(x = fibroblast_sub, subset = (Tumor.Grade == 'IV'))
View(fibroblast_gbm)
fibroblast_gbm$Pathology
unique(fibroblast_gbm$Pathology)
fibroblast_tumor_only <- subset(x = fibroblast_sub, subset = (Tumor.Grade.Plus.Treatment %in% c('II - Untreated','III - Untreated','IV - Untreated')))
View(fibroblast_tumor_only)
unique(fibroblast_tumor_only$Tumor.Grade)
unique(fibroblast_tumor_only$Pathology)
unique(fibroblast_tumor_only$Treatment)
fibroblast_GBM_markers <- FindMarkers(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade')
View(fibroblast_GBM_markers)
View(fibroblast_GBM_markers)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(stats)
library(ggrepel)
ggplot(data=fibroblast_GBM_markers, aes(x=avg_log2FC, y=-log(p_val))) +
geom_point() +
theme_minimal() +
geom_text_repel() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
ggplot(data=fibroblast_GBM_markers, aes(x=avg_log2FC, y=-log(p_val))) +
geom_point() +
theme_minimal() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
install.packages('DESeq2')
BiocManager::install("DESeq2")
fibroblast_GBM_markers$diffexpressed <- 'NO'
fibroblast_GBM_markers$diffexpressed[fibroblast_GBM_markers$avg_log2FC > 0.6 & fibroblast_GBM_markers$p_val_adj < 0.05] <- 'UP'
fibroblast_GBM_markers$diffexpressed[fibroblast_GBM_markers$avg_log2FC < -0.6 & fibroblast_GBM_markers$p_val_adj < 0.05] <- 'DOWN'
ggplot(data=fibroblast_GBM_markers, aes(x=avg_log2FC, y=-log(p_val_adj), col=diffexpressed)) +
geom_point() +
theme_minimal() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
colnames(fibroblast_GBM_markers)
rownames(fibroblast_GBM_markers)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(stats)
library(ggrepel)
library(tibble)
fibroblast_GBM_markers <- rownames_to_column(fibroblast_GBM_markers, var="gene_symbol")
fibroblast_GBM_markers$delabel <- NA
fibroblast_GBM_markers$delabel[fibroblast_GBM_markers$diffexpressed != "NO"] <- fibroblast_GBM_markers$gene_symbol[fibroblast_GBM_markers$diffexpressed != "NO"]
ggplot(data=fibroblast_GBM_markers, aes(x=avg_log2FC, y=-log(p_val_adj), col=diffexpressed, label=delabel)) +
geom_point() +
theme_minimal() +
geom_text_repel() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.6, 0.6), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
DEenrichRPlot(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade')
install.packages('enrichR')
DEenrichRPlot(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade')
DEenrichRPlot(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade', enrich.database = 'GO_Biological_Process_2013')
DEenrichRPlot(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade', enrich.database = 'GO_Biological_Process_2013')
DEenrichRPlot(fibroblast_tumor_only, ident.1 = 'IV', group.by = 'Tumor.Grade', enrich.database = 'GO_Biological_Process_2013', max.genes = 50)
View(fibroblast_GBM_markers)
fibroblast_tumor_only_2 <- SetIdent(fibroblast_tumor_only, value = "Tumor.Grade")
View(fibroblast_tumor_only_2)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Biological_Process_2013', max.genes = 50)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', ident.2 = c('II','III'),  enrich.database = 'GO_Biological_Process_2013', max.genes = 50)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', ident.2 = c('II'),  enrich.database = 'GO_Biological_Process_2013', max.genes = 50)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', ident.2 = 'II',  enrich.database = 'GO_Biological_Process_2013', max.genes = 50)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV',  enrich.database = 'GO_Biological_Process_2021', max.genes = 50)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV',  enrich.database = 'GO_Biological_Process_2021', max.genes = 1000)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV',  enrich.database = "GO_Biological_Process_2021", max.genes = 1000)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV',  enrich.database = c("GO_Biological_Process_2021"), max.genes = 1000)
View(fibroblast_tumor_only_2)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = "GO_Biological_Process_2021", max.genes = 1000)
DEenrichRPlot(fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = "GO_Biological_Process_2021", max.genes = 50)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = "GO_Biological_Process_2021", max.genes = 50)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = "IV", enrich.database = "GO_Biological_Process_2021", max.genes = 50)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = "IV", enrich.database = "GO_Biological_Process_2013", max.genes = 50)
fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6]
fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6,]
fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6 & fibroblast_GBM_markers$p_val_adj < 0.05,]
fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6 & fibroblast_GBM_markers$p_val_adj < 0.05,]$gene_symbol
fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6 & fibroblast_GBM_markers$p_val_adj < 0.05,]
fibroblast_GBM_markers_UP <- fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.6 & fibroblast_GBM_markers$p_val_adj < 0.05,]
write.csv(fibroblast_GBM_markers_UP, 'fibroblast_GBM_markers_UP.csv')
enrichR::enrichr(fibroblast_GBM_markers_UP$gene_symbol, databases = 'GO_Biological_Process_2021')
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(stats)
library(ggrepel)
library(tibble)
library(enrichR)
enrichR::enrichr(fibroblast_GBM_markers_UP$gene_symbol, databases = 'GO_Biological_Process_2021')
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Biological_Process_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Biological_Process_2021', max.genes = 100)
fibroblast_GBM_markers$diffexpressed <- 'NO'
fibroblast_GBM_markers$diffexpressed[fibroblast_GBM_markers$avg_log2FC > 0.25 & fibroblast_GBM_markers$p_val_adj < 0.05] <- 'UP'
fibroblast_GBM_markers$diffexpressed[fibroblast_GBM_markers$avg_log2FC < -0.25 & fibroblast_GBM_markers$p_val_adj < 0.05] <- 'DOWN'
fibroblast_GBM_markers$delabel <- NA
fibroblast_GBM_markers$delabel[fibroblast_GBM_markers$diffexpressed != "NO"] <- fibroblast_GBM_markers$gene_symbol[fibroblast_GBM_markers$diffexpressed != "NO"]
ggplot(data=fibroblast_GBM_markers, aes(x=avg_log2FC, y=-log(p_val_adj), col=diffexpressed, label=delabel)) +
geom_point() +
theme_minimal() +
geom_text_repel() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.25, 0.25), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
fibroblast_GBM_markers_UP <- fibroblast_GBM_markers[fibroblast_GBM_markers$avg_log2FC>0.25 & fibroblast_GBM_markers$p_val_adj < 0.05,]
View(fibroblast_GBM_markers_UP)
DEenrichRPlot(object = fibroblast_tumor_only_2, ident.1 = 'IV', enrich.database = 'GO_Molecular_Function_2021', max.genes = 100)
# Get seurat object for only fibroblast cells in GBM samples
fibroblast_GBM_only <- subset(x = fibroblast_sub, subset = (Tumor.Grade %in% c('IV')))
View(fibroblast_GBM_only)
fibroblast_treatment_markers <- FindMarkers(fibroblast_GBM_only, ident.1 = 'Treated', group.by = 'Treatment')
View(fibroblast_treatment_markers)
fibroblast_treatment_markers <- rownames_to_column(fibroblast_treatment_markers, var="gene_symbol")
fibroblast_treatment_markers$diffexpressed <- 'NO'
fibroblast_treatment_markers$diffexpressed[fibroblast_treatment_markers$avg_log2FC > 0.25 & fibroblast_treatment_markers$p_val_adj < 0.05] <- 'UP'
fibroblast_treatment_markers$diffexpressed[fibroblast_treatment_markers$avg_log2FC < -0.25 & fibroblast_treatment_markers$p_val_adj < 0.05] <- 'DOWN'
fibroblast_treatment_markers$delabel <- NA
fibroblast_treatment_markers$delabel[fibroblast_treatment_markers$diffexpressed != "NO"] <- fibroblast_treatment_markers$gene_symbol[fibroblast_treatment_markers$diffexpressed != "NO"]
ggplot(data=fibroblast_treatment_markers, aes(x=avg_log2FC, y=-log(p_val_adj), col=diffexpressed, label=delabel)) +
geom_point() +
theme_minimal() +
geom_text_repel() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-0.25, 0.25), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
fibroblast_GBM_only_2 <- SetIdent(fibroblast_GBM_only, value = "Treatment")
DEenrichRPlot(object = fibroblast_GBM_only_2, ident.1 = 'Treated', enrich.database = 'GO_Biological_Process_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_GBM_only_2, ident.1 = 'Treated', enrich.database = 'GO_Cellular_Component_2021', max.genes = 100)
DEenrichRPlot(object = fibroblast_GBM_only_2, ident.1 = 'Treated', enrich.database = 'GO_Molecular_Function_2021', max.genes = 100)
View(fibroblast_gbm)
library(Seurat)
library(infercnv)
library(Seurat)
library(infercnv)
library(Seurat)
library(rjags)
install.packages('rjags')
library(Seurat)
library(rjags)
library("libjags")
install.packages("libjags")
library(Seurat)
library(rjags)
library(Seurat)
library(infercnv)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/brandonbergs/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/brandonbergs/homebrew/opt/jags/lib'
"
)
library(Seurat)
library(infercnv)
library(Matrix)
t_subser <- readRDS(file = '/Users/brandonbergs/Documents/Research/Glioma scRNA-Seq Project/Data/tumorsub.RDS')
View(t_subser)
unique(t_subser$Pathology)
table(t_subser$Pathology)
cell_annotations_pathology <- as.data.frame(t_subser$Pathology)
View(cell_annotations_pathology)
write.table(cell_annotations_pathology, file='1.2_results/t_cell_annotations_pathology.txt', sep='\t', col.names=FALSE, quote=FALSE)
# Load packages
library('dplyr')
library('tidyr')
# Load packages
library('dplyr')
library('tidyr')
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
View(FullData)
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK",
"2-4 TIMES PER WEEK/HALF THE TIME",
"5 OR MORE TIMES PER WEEK/ALMOST ALWAYS"))))
View(Data)
View(Data)
View(FullData)
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK",
"2-4 TIMES PER WEEK/HALF THE TIME",
"5 OR MORE TIMES PER WEEK/ALMOST ALWAYS"))))
View(Data)
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK",
"2-4 TIMES PER WEEK/HALF THE TIME",
"5 OR MORE TIMES PER WEEK/ALMOST ALWAYS"))))
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES)
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA)))
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(replace(.,.=="NOT AT ALL",0))) %>%
mutate_each(funs(replace(.,.=="ONCE A WEEK",1))) %>%
mutate_each(funs(replace(.,.=="2-4 TIMES PER WEEK/HALF THE TIME",2))) %>%
mutate_each(funs(replace(.,.=="5 OR MORE TIMES PER WEEK/ALMOST ALWAYS",3)))
View(Data)
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
rename("USUBJIB" = "ID") %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(replace(.,.=="NOT AT ALL",0))) %>%
mutate_each(funs(replace(.,.=="ONCE A WEEK",1))) %>%
mutate_each(funs(replace(.,.=="2-4 TIMES PER WEEK/HALF THE TIME",2))) %>%
mutate_each(funs(replace(.,.=="5 OR MORE TIMES PER WEEK/ALMOST ALWAYS",3)))
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
rename("ID" = "USUBJIB") %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(replace(.,.=="NOT AT ALL",0))) %>%
mutate_each(funs(replace(.,.=="ONCE A WEEK",1))) %>%
mutate_each(funs(replace(.,.=="2-4 TIMES PER WEEK/HALF THE TIME",2))) %>%
mutate_each(funs(replace(.,.=="5 OR MORE TIMES PER WEEK/ALMOST ALWAYS",3)))
# Frequency at baseline:
Data <- FullData %>%
filter(EPOCH == "BASELINE",
grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
rename("ID" = "USUBJID") %>%
mutate_each(funs(replace(.,.=="NOT ANSWERED",NA))) %>%
mutate_each(funs(replace(.,.=="NOT AT ALL",0))) %>%
mutate_each(funs(replace(.,.=="ONCE A WEEK",1))) %>%
mutate_each(funs(replace(.,.=="2-4 TIMES PER WEEK/HALF THE TIME",2))) %>%
mutate_each(funs(replace(.,.=="5 OR MORE TIMES PER WEEK/ALMOST ALWAYS",3)))
View(FullData)
library('PRONA')
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
Data <- PRONA::format_ptsd_data(FullData)
library('PRONA')
Data <- PRONA::format_ptsd_data(FullData)
library('PRONA')
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
Data <- PRONA::format_ptsd_data(FullData)
Data <- PRONA::format_ptsd_data(FullData)
Data <- PRONA::format_ptsd_data(FullData)
library('PRONA')
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
Data <- PRONA::format_ptsd_data(FullData)
library('PRONA')
Data <- PRONA::format_ptsd_data(FullData)
library('PRONA')
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
Data <- PRONA::format_ptsd_data(FullData)
View(Data)
write.csv(Data, '../data/qs_formatted.csv')
library('PRONA')
NewData <- system.file('extdata','qs_formatted.csv', package='PRONA')
system.file('extdata','qs_formatted.csv', package='PRONA')
NewData <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
View(NewData)
write.csv(Data, '../data/qs_formatted.csv', row.names = FALSE)
FullData <- read.csv('../data/qs.csv', stringsAsFactors = FALSE)
Data <- PRONA::format_ptsd_data(FullData)
write.csv(Data, '../data/qs_formatted.csv', row.names = FALSE)
library('PRONA')
NewData <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
View(NewData)
library('PRONA')
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_severity(df)
library('PRONA')
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_severity(df, y_label='frequency')
library('PRONA')
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_severity(df, y_label='frequency')
library('PRONA')
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_severity(df, y_label='frequency')
View(df)
library("PRONA")
library("PRONA")
# The formatted PTSD data is included in the PRONA package and can be
# read-in as such:
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_frequency(df)
plot_occurrence(df)
# First conduct redundancy analysis without latent variable reduction to visualize overlap between variables
uva_results1 <- perform_uva(df)
View(df)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
# Now conduct UVA with variable consolidation. Chose to consolidate two variable
# pairs:
# 1. Being Jumpy Or Easily Startled & Being Over Alert
# 2. Upset When Reminded of Trauma & Upsetting Thoughts Or Images
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = 'output')
# Get reduced dataframe
reduced_df <- read.csv('output/reduced_data.csv', stringsAsFactors = FALSE)
View(reduced_df)
# Plot frequency and occurrence of reduced data
plot_frequency(reduced_df)
# Plot occurrence of reduced data
plot_occurrence(reduced_df)
check_normality(reduced_df)
plot_density(reduced_df)
network1 <- construct_ggm(reduced_df)
plot_ggm(network1)
network1_plot <- plot_ggm(network1)
get_ggm_weights(network1)
calculate_centralities(network1)
plot_centralities(network1)
calculate_bridge_centralities(network1)
plot_bridge_centralities(network1)
library(PRONA)
df <- read.csv(system.file('extdata','qs_formatted.csv', package='PRONA'), stringsAsFactors = FALSE)
plot_frequency(df)
plot_occurrence(df)
uva_results1 <- perform_uva(df)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
plot_wTO(uva_results1)
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = 'output')
setwd("/Users/brandonbergs/Documents/Research/NIH/PRONA")
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = 'test_scripts/output')
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = 'test_scripts/output')
getwd()
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = 'test_scripts/output')
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, output_dir = '../test_scripts/output')
uva_results2 <- perform_uva(df, reduce = TRUE, scale = 3, auto = TRUE, label.latent = TRUE, output_dir = '../test_scripts/output')
